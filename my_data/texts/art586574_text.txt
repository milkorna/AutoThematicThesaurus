
If you're interested in learning new languages or teaching them, then you probably know such a way as parallel reading. It helps to immerse yourself in the context, increases the vocabulary, and allows you to enjoy the learning process. When it comes to reading, you most likely want to choose your favorite author, theme, or something familiar and this is often impossible if no one has published such a variant of a parallel book. It's becoming even worse when you're learning some cool language like Hungarian or Japanese.
Today we are taking a big step forward toward breaking this situation.
We will use the lingtrain_aligner tool. It's an open-source project on Python which aims to help all the people eager to learn foreign languages. It's a part of the Lingtrain project, you can follow us on Telegram , Facebook and Instagram . Let's start!
Find the texts.
At first, we should find two texts we want to align. Let's take two editions of "To Kill a Mockingbird" by Harper Lee, in Russian and the original one.
The first lines of the found texts look like this:
была сломана рука. Когда рука зажила и Джим перестал бояться, что не сможет играть в футбол, он ее почти не стеснялся. Левая рука стала немного короче правой; когда Джим стоял или ходил, ладонь была повернута к боку ребром. Но ему это было все равно — лишь бы не мешало бегать и гонять мяч.
Extract parallel corpora.
The first step is to make a parallel corpus from our texts. Is a serious task, mainly because of the following reasons:
Professional translators are kind of artists. They can translate one sentence as several and vice versa. They feel the language and can be very creative in the desire to convey the meaning..
Some parts of the translated text can be missing..
During extraction we need to save the paragraph structure somehow. Without it, we will not be able to create a solid and decorated book..
We will use the python lingtrain_aligner library which I'm developing. Under the hood, it uses machine learning models (sentence-transformers, LaBSE, and others). Such models will transform sentences into dense vectors or embeddings . Embeddings are a very interesting way to catch a sense contained in a sentence. We can calculate a cosine distance between the vectors and interpret it as semantic similarity. The most powerful (and huge) model is LaBSE by Google. It supports over 100 languages.
Before we feed our texts into the tool we need to prepare them.
Prepare the texts.
Add the markup.
I've made a simple markup language to extract the book structure right before the alignment. It's just a special kind of token that you need to add to the end of the sentence.
New paragraph token.
This kind of token will be placed automatically following the rule:
if the line ends with [.,:,!?] character and EOF (end of the line, '/n' char) we treat it as the end of the paragraph.
Text preprocessing.
Delete unnecessary lines (publisher information, page numbers, notes, etc.)..
Put labels for the author and the title..
Label the headings (H1 is the largest, H5 is the smallest). If the headers aren't needed, then just delete them..
Make sure that there are no lines in the text that end with a [.,:,!?] and aren't the end of a paragraph (otherwise the whole paragraph will be split into two parts)..
Place the labels in accordance with the aforementioned rules. Empty lines do not play any role. You should get documents similar to these:
Marked lines will be automatically extracted from the texts before alignment. They will be used when we will make a book.
Align texts.
Colab.
We will do the whole process in the Google Colab notebook, so everyone can do the same for free without installing anything on his or her machine. I've prepared the Colab, it contains all the instructions.
Colab version.
Meanwhile, we will observe the alignment process in more detail.
Details.
After installing the tool with this command:
We are loading our texts, adding the paragraph tokens and splitting them into the sentences:
_db path is the heart of the alignment. It's an SQLite database that will hold information about the alignment and document structure. Also, note that we provided the language codes ("en" and "ru"). This means that some language-specific rules will be applied during the splitting. You can find all supported languages with this command:
If your language is not here make an issue on GitHub or write in our group in telegram. You can also use the " xx " code to use some base rules for your text.
Now, when texts are split, let's load them into the database:
Primary alignment.
Now we will align the texts. It's a batched process. Parts of texts size of batch_size with some extra lines size of window will align together with the primary alignment algorithm.
Let's see the result of the primary alignment. vis_helper helps us to plot the alignment structure:

Not bad. But there are a lot of conflicts. Why? Consider the following reasons:
Model has too many good variants. If the line is short (some kind of a chat or just a name) the model can find another similar line in the window and take it as a suitable choice..
The right line is not in the search interval. Texts have different counts of sentences and the "alignment axis" can go beyond the window..
To handle the second problem you can use the shift parameter.
And to handle conflicts there is a special module called resolver.
Resolve the conflicts.
We can observe all the found conflicts using the following command:
And some statistics:
The most frequent conflicts are the size of '2:3' and '3:2'. It means that one of the sentences here was translated as two or vise versa.
The most successful strategy that came into my mind is to resolve the conflicts iteratively. From smaller to bigger.
Visualization after the first step:

And after the second:

Great! Now our book.db file holds the aligned texts along with the structure of the book (thanks to markup).
Create a book.
The module called reader will help us to create a book.
With the direction parameter ["from", "to"] you can choose which paragraph structure is needed (the first text or the second).
Let's create it:
And will see this as input:

It's a simple styled HTML page. I've added some styles to make it even useful for language learners! It's a template parameter.


Custom styles.
You can even use your own style. For example, let's highlight all even sentences in the book:

You can use any applicable to span CSS styles:

I hope it will be helpful for all who love languages. Have fun!
Next time we will discuss multilingual books creation and use the UI tool which I'm working on. Stay tuned.
To be continued.
It is an open-source project. You can take a part in it and find the code on ours github page . Today's Colab is here.
You can also support the project by making a donation.
May the Language Force be with you.