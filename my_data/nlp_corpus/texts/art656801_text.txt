Чем выше спрос на разговорные интерфейсы, тем больше решений на рынке для разработки ботов. Но не всегда понятно, какое выбрать — речь даже не про конкретный продукт или вендора, а про сам инструмент. Например, можно купить уже готового бота, заказать разработку, сделать все своими силами в конструкторе, с помощью фреймворка или диалоговой платформы. Мы подготовили подробнейший гайд по основным способам создания бота.
Сразу предупредим. Обзор инструментов мы построили от простого к сложному — вряд ли разработчиков, продвинутых в области разговорных интерфейсов, ждут откровения в главе про конструкторы ботов (зато будет полезно почитать про фреймворки). В материале собраны способы для всех: новичков в разговорном ИИ, предпринимателей и хобби-девелоперов, инди-разработчиков и тех, кто решает серьезные девелоперские задачи для бизнеса. Вот краткое описание каждого способа:
Готовые боты и шаблоны. Самый быстрый способ внедрить виртуального помощника в свой проект. Подходит для небольших и узконаправленных задач и не рассчитан на кастомизацию.
Конструкторы ботов. Легкий способ создать бота в визуальном интерфейсе по собственному сценарию и адаптировать его под требования проекта. Все это — без знаний кода. Подходит для предпринимателей, малого и среднего бизнеса.
Диалоговые платформы. Более сложный способ, который позволяет создавать масштабные решения с продвинутой логикой — в том числе enterprise-компаниям. Требует навыков программирования и дополнительных ресурсов, например, инфраструктуры для хостинга и масштабирования.
Open-source фреймворки. Бесплатный инструмент для разработчиков, позволяющий описывать логику сценариев, не ограничиваясь архитектурой диалоговых платформ и других решений.
Оглавление.
Наш материал получился большим — используйте меню, чтобы быстро переходить к нужным пунктам.
Готовые ботыЧто это такое В чем преимуществаКакие недостатки у готовых ботовSolution Store от Just AI.
КонструкторыЧто это такое Чем отличаются от готовых ботовЧто можно создать в конструктореКакие общие преимущества у конструкторовНа что обращать внимание при выбореAimylogic от Just AI.
Диалоговые платформыЧем отличаются от конструкторовЧто можно создать в платформахВ чем отличия и на что обращать внимание при выбореJAICP от Just AI.
ФреймворкиЧто это такоеЧем отличаются от платформЧто можно создать с использованием фреймворковКому интересны фреймворкиКакие преимущества перед платформамиНа что обращать внимание при выборе фреймворкаJAICF от Just AI.
Подводим итоги.
Готовые боты.
Что это такое.
Это уже готовые решения для конкретных сфер или задач. Такие боты умеют проводить опросы, модерировать чаты, оформлять заказы, записывать на консультацию или выдавать пользователям нужную информацию по запросу. Это продукт, который нацелен на решение задач в определенном бизнес-сегменте — так, готовых ботов можно найти для ресторанного бизнеса, рекрутмента, интернет-магазинов и других областей.
Готовые боты, как правило, достаточно простые (в том числе кнопочные) и реализуют какую-то несложную логику, без разветвленного сценария. Часто их можно обнаружить в сервисах по созданию ботов в виде готовых шаблонов. Одни направлены, например, только на Telegram, а другие могут подключаться к нескольким мессенджерам сразу.
В чем преимущества.
Так как боты уже готовы, то и последующей работы с ними немного. Достаточно отредактировать некоторые шаги и контент, чтобы конкретизировать данные для своего проекта, добавить ссылки, подключить каналы — и все уже работает. Получается быстро и легко.
Эти решения не требуют проработки сценария — их создатели уже учли ключевые моменты, касающиеся контента и логики конкретного кейса и задачи. С готовыми ботами можно не думать об организации инфраструктуры — серверов, поддержки интеграций, хостинга моделей NLU — все хранится на стороне поставщиков решений.
А еще с ними удобно быстро тестировать гипотезы. Например, если у заказчика салон красоты, а помощник записывает к парикмахеру, — это хороший способ проверить, помогает ли бот снять нагрузку с администраторов и ускоряет ли процесс записи в салон.
В чем минусы.
Узкая специализация. Бывает непросто найти решение для своей задачи, а если такое находится — в будущем этого сценария или подключенных каналов может быть недостаточно. Например, если бизнес и количество услуг будут расти.
Простые боты. Не во всех случаях хватает функциональности кнопочного бота без ИИ.
Сложная или невозможная кастомизация. Если в сценарии нужны изменения, часто это требует большого количества доработок или невозможно вовсе — владелец решения может не давать доступ к исходному коду.
Готовые решения в Solution Store.
Just AI создали маркетплейс готовых решений, где можно найти бота для узких задач и сфер: ЖКХ и ритейла, e-commerce, финтеха и других. Сейчас в маркетплейсе 20 решений от Just AI и сторонних разработчиков, их список постоянно пополняется. Плюсы солюшенов в том, что для каждого такого решения готовы словари синонимов, основные интенты, логика сценария, интеграции с технологиями, отчетами аналитики и каналами. Остается только адаптировать содержание веток сценария, развернуть, интегрировать и запустить решение.
Разработчики могут придумывать и создавать свои отраслевые решения, размещать их в маркетплейсе и зарабатывать, кастомизируя сценарии под клиентов.
Конструкторы ботов.
Что это такое.
Это наборы готовых инструментов «из коробки», которые позволяют создавать и настраивать ботов без технических навыков и разработчиков — любой пользователь может прийти в конструктор и разработать в нем виртуального помощника своими руками. Конструкторы бывают low-code и no-code.
Для создания сценария используются визуальные блоки, из которых пользователь, как из кубиков, составляет логику работы своего разговорного решения. В блоках указываются действия бота и ожидаемые действия пользователей, например, намерения пользователей (интенты), и все это соединяется между собой в нужной последовательности. Когда сценарий и логика готовы, бота можно подключить к соцсетям и мессенджерам, интегрировать с CRM и внешними системами, обучать нужным действиям: например, переводить диалог на оператора при определенном событии.
Чем отличаются от готовых ботов.
Если в готовых ботах уже прописан сценарий для конкретного кейса, конечная функциональность помощника ограничена, а его кастомизация либо невозможна, либо бессмысленна, в конструкторе пользователь сам создает нужный ему сценарий и редактирует логику диалога бота.
Что можно создать в конструкторе.
Различных чат-ботов: от FAQ-бота до бота для лидогенерации.
Несложных ботов для обзвонов и IVR (входящей телефонии).
Навыки для голосовых ассистентов, например, Алисы от Яндекса или Маруси от VK.
Какие общие преимущества у конструкторов.
Конструкторы хороши тем, что это решение «из коробки» — не нужно самостоятельно прописывать интеграции и думать о хостинге (все хранится в окружениях поставщика решения), реализации логики. Об этом уже позаботились разработчики сервисов. И важно, что сценарий продумывается и прописывается самостоятельно: можно учесть все необходимые моменты для проведения успешных диалогов с пользователями.
У конструкторов низкий порог входа в разработку, для работы с ними не надо уметь программировать. Что касается скорости создания бота, здесь все очень индивидуально и зависит от сценария и набора нужных функций. У одного пользователя — чат-бот с 3 вопросами, а у кого-то логика для телефонии из 100 с лишним блоков. Но это все равно быстрее, чем разрабатывать бота с нуля, используя платформу или фреймворки.
На что обращать внимание при выборе.
Типы ботов. Ограничивается ли конструктор одним направлением или позволяет создать и голосовых помощников, и чат-ботов.
No-code/low-code. Настраивается ли все через визуальные блоки или есть возможность прокачивать бота с помощью кода: добавления условий и переменных, обращения к внешним серверам, прописыванием стейтов.
Количество каналов. Чем больше доступных каналов, тем лучше. Если вы планируете подключить бота к разным мессенджерам, лучше выбирать конструктор, где каналы доступны уже сейчас.
Наличие NLU-сервиса. Что можно создать в конструкторе — только кнопочного бота или умного помощника, понимающего живую речь собеседника.
Инструменты и фичи. Можно ли в конструкторе научить бота полезным действиям, кроме общения с пользователями: например, напоминать о предстоящей записи, переводить диалог на оператора по запросу.
Интеграции. Позволяет ли конструктор работать с внешними системами и сервисами, готовые ли эти интеграции или их нужно прописывать самостоятельно.
Аналитика. Предоставляет ли работу с метриками, позволяет ли анализировать диалоги бота с пользователями и их вопросы, собирает ли данные в отчеты.
База знаний и поддержка. Понятные ли инструкции для работы с сервисом, есть ли техническая поддержка и на каких условиях.
Aimylogic от Just AI.
У Just AI есть универсальный конструктор. Пользователи Aimylogic могут не только размещать своих ботов в множестве каналов, но и развиваться сразу в нескольких направлениях: создавать сложные сценарии для чат-бота, запускать массовые обзвоны с помощью сервиса, автоматизировать входящую телефонию и даже создавать навыки для голосовых ассистентов.
30 готовых интеграций и каналов. Популярные чаты и мессенджеры, CRM и инструменты аналитики, сервисы для рассылок — эти интеграции уже входят в конструктор, достаточно настроить и подключить их с помощью готовых инструкций. Список доступных интеграций постоянно пополняется. Также есть возможность самостоятельно прописать интеграцию, которой нет в сервисе.
Разные типы ботов. Любой пользователь может создать в Aimylogic чат-бота, голосового помощника входящей телефонии, бота для обзвонов или навыки для умных колонок.
Инструменты. С помощью конструктора можно проапгрейдить бота: научить его отправлять изображения и видео, звонить и писать по расписанию, запускать рассылки, запрашивать оплату в Telegram и многое другое.
Искусственный интеллект. В конструктор встроен NLU, который позволяет обучать бота новым смыслам и фразам и разгрузить операторов: в 80% случаев виртуальный помощник сможет самостоятельно решить вопросы пользователей.
Не требует знаний кода. В Aimylogic приходят много пользователей, которые никогда не сталкивались с разработкой. Это low-code продукт: если хочется сделать бота мощнее, возможность разобраться в коде есть даже у новичка. Сама работа в визуальном интерфейсе интуитивно понятна.
Удобное и прозрачное ценообразование. Клиенты Aimylogic платят не за использование конструктора, а за количество потраченных минут и объем трафика —пользователей, общающихся с ботом. Это значит, что если нужно доработать сценарий или подключить дополнительный канал, сервис не возьмет никаких доплат. Конструктор также предлагает бесплатные тарифы, в которых можно запустить бота на небольшую аудиторию.
Статистика и аналитика. Конструктор позволяет оценить, сколько пользователей бросили диалог с ботом и сколько конверсий они совершили, какие фразы не смог распознать бот и как часто он привлекал оператора для решения вопросов. Это очень ценные данные: они помогают понять, где нужно доработать решение и как сделать бота полезнее. Результаты доступны в статистике и отчетах. А чтобы оценивать метрики детальнее, можно подключить Google Analytics или CRM-систему.
Прокачанная логика с помощью Javascript. Поддержка HTTP-запросов и вебхуков, математические операции и подсчеты во время диалога — все это возможно с помощью JS-выражений, которые прописываются прямо в сценарии.
Языки. Кроме русского боты, созданные в Aimylogic, могут общаться на английском, казахском, португальском и испанском языках.
Комьюнити и поддержка. Если возникают вопросы по работе с продуктом, ответы на них можно найти в документации, у бесплатной технической поддержки или в телеграм-сообществе разработчиков Aimylogic.
Диалоговые платформы.
Набор всех сервисов и решений для прототипирования, разработки, тестирования, развертывания, контроля качества и последующей поддержки диалогового решения, всего его жизненного цикла — в одном окне. По сути, это центр, главный связующий элемент всей архитектуры бота. Платформы рассчитаны на пользователей, у которых есть навыки разработки или соответствующая команда.
Кроме перечисленных функций, платформы отвечают за интеграцию с внешними системами и каналами, хранение логов диалогов и управление всеми компонентами решения.
Чем отличаются от конструкторов.
В конструкторах логика сценария ограничена возможностями конструктора и тем, как бот обрабатывает фразу пользователя.
Платформы же имеют более высокий контроль над всеми компонентами, позволяют обходить нестандартные ситуации и усложнять логику сценария: добавлять подсценарии и возвращаться к этапам текущего стейта диалога, например, если бот ожидает от пользователя информацию об адресе доставки, и при этом в ответе пользователя не будет указана улица, бот переспросит название улицы.
Это возможно благодаря тому, что, в отличие от конструкторов, платформа не ограничивается визуальным интерфейсом, а предоставляет возможность разрабатывать сценарии в том числе на общих языках программирования.
Если коротко, то широкие возможности платформ открывают доступ к настройке сложных технических интеграций, созданию и управления множеством веток сценариев, масштабированию проектов под разные потребности бизнеса и пользовательские нагрузки, развертыванию разговорных решений enterprise-уровня. При этом в платформах есть уже готовые инструменты, которые экономят достаточно времени на их разработке.
Еще одним важным отличием платформ от конструкторов является модульность. Модульность — это возможность подключать внешние сервисы для улучшения работы бота, например свой собственный NLU-сервис. Часто у компаний есть свои собственные решения обработки естественного языка, которые лучше всего работают для их клиентов. Например, банки точно знают, как их клиенты называют их продукты и формулируют свои проблемы. Платформы позволяют использовать эти решения в сценарии.
Модульность также позволяет подключать любые собственные сервисы по API: собственную телефонию, собственный ASR и TTS, любую CRM-систему, любые текстовые каналы и собственную BI-систему.
Что можно создать в платформах.
В платформе можно разработать бота почти любого уровня сложности. 3 самых распространенных решения:
Чат-боты техподдержки, которые понимают естественную речь, дают ответы из  базы знаний и переводят на оператора при необходимости.
Голосовые ассистенты и навыки для них с разветвленной логикой и чит-чатом.
Виртуальные операторы для входящих и исходящих звонков, которые правильно реагируют на перебивания, вносят изменения в CRM-систему и перезванивают по запросу.
Платформы являются лучшим решением для тех, кому нужны боты в телефонном канале для обзвонов или IVR. Несмотря на то, что для создания телефонного бота можно использовать конструкторы и open-source фреймворки, платформы удобны тем, что инфраструктура работы с телефонией уже реализована.
В чем отличия и на что обращать внимание при выборе.
Простота освоения и разработки. Особенно для тех, кто не занимается разговорным ИИ профессионально, в первую очередь имеет значение простота достижения первоначального результата, без необходимости изучать всю документацию перед работой с платформой. Да и в целом — чем проще процесс разработки, тем быстрее можно запустить проект. При выборе платформы важно учитывать, насколько удобно разрабатывать и поддерживать решение. Есть ли возможность использовать общие языки программирования и проводить тестирование, создавать управляемое и масштабируемое решение.
Возможности NLU. В некоторых платформах NLU позволяет использовать только простейшие паттерны, в других — глубоко обучать сложные модели. Если не хватает возможностей встроенного сервиса, здорово, если в платформе есть API для подключения других NLU к своему проекту.
Языки программирования. Язык программирования, применяемый в платформе, также является важным критерием выбора. Так, в зависимости от вендора, сценарии можно разрабатывать на одном или нескольких общих языках программирования (Java, Javascript, Python, Kotlin) или только с помощью DSL. Вне зависимости от доступного языка очень ценно, когда внутри есть хорошие SDK и грамотные абстракции.
Установка в контур. Не все платформы предоставляют возможность размещения разговорного решения в контуре клиента. А это может быть необходимо, если клиенту нужно соблюдать требования по безопасности — например, банку, страховой компании или медицинской организации.
Документация и поддержка. Перед тем, как выбрать платформу, полезно изучить ее вспомогательные ресурсы — понятность документации и доступность технической поддержки. Гораздо легче выполнять свои задачи, когда документация — не просто справочная со сложными описаниями, а большой раздел, где простым языком объясняются и внутренние термины, и разные кейсы разработки.
JAICP от Just AI.
Платформа со встроенным NLU-сервисом для разработки мощных ИИ-ботов: чат-ботов, виртуальных операторов, голосовых ассистентов и навыков для них. Пользователи JAICP — крупный бизнес и разработчики, создающие сложные разговорные решения.
Все сервисы — внутри платформы. JAICP позволяет управлять всем жизненным циклом сценария в одном окне: от написания логики бота и разработки интентов до его тестирования и анализа эффективности. Инструменты и сервисы объединяются в единую экосистему, что позволяет бесшовно подключать и использовать их.
От чат-ботов до обзвонов. JAICP позволяет создавать разговорные решения любой сложности: умных чат-ботов, обзвоны и входящую телефонию, которые поддерживают до нескольких тысяч звонков одновременно, собственных голосовых ассистентов,  голосовые игры, навыки для умных колонок и голосовых ассистентов (например, Алисы).
Все для создания и развертывания сложного сценария. Логика сценария описывается с помощью JAICP DSL и вставок JavaScript, с которыми бот может обращаться к внешним системам, обрабатывать и синхронизировать данные, проводить вычисления и оставаться в контексте диалога.
Инструменты JAICP позволяют проводить расширенные автотесты, контролировать все изменения в коде и управлять ими с помощью Git, работать над решением большой командой одновременно. Если нужно больше возможностей — например, подключать произвольные библиотеки на Java, писать код на Kotlin с автодополнением в IDEA, — можно объединить инфраструктуру JAICP с бесплатным фреймворком JAICF.
Фичи и инструменты для телефонии. В JAICP уже реализована полезная функциональность для создания продвинутых виртуальных телефонных операторов:
настраиваемая логика совершения вызова: по расписанию и API-триггеру;
готовая логика перезвона: если пользователь просит перезвонить, бот самостоятельно перезвонит, когда абоненту будет удобно;
подключаемый шум колл-центра, чтобы вызовы звучали естественнее для собеседника;
программируемая логика реакции на перебивания и активное слушание: бот замолчит и выслушает или продолжить произносить фразу;
гибридный синтез для озвучки пользовательских переменных в сценарии. Так, виртуальный оператор звучит точно так же, как предзаписанная озвучка диктором, когда произносит переменные, которые были неизвестны на момент совершения вызова;
аналитика эффективности телефонных кампаний и A/B-эксперименты.
Собственный NLU. JAICP интегрирован с собственным NLU-ядром CAILA, которое позволяет ботам понимать естественную речь. Управление логами диалогов дает как дообучать NLU прямо из интерфейса JAICP,так и загружать обучающие выборки, чтобы на старте проекта обучить NLU лучше распознавать намерения ваших клиентов.
Готовые интеграции. Для публикации бота уже подключены 30 каналов: от мессенджеров и соцсетей до CRM-систем. Это удобно: не нужно настраивать интеграции с нуля. Но если нужно, подключаться к внешним сервисам можно по API.
Производительная инфраструктура в JAICP или в контуре. Несколько конфигураций оборудования для соответствия схеме нагрузки. Адаптивность к высоким нагрузкам ~400 rps и 10M MAU. Горизонтальное масштабирование и балансировка нагрузки и 152-ФЗ.
Документация, обучение и поддержка. Технические писатели команды JAICP регулярно пополняют документацию статьями, кейсами разработки и новыми релизами. По будням на связи — техническая поддержка, которая помогает разобраться с любыми вопросами по работе с платформой. В Telegram — комьюнити пользователей, где каждый делится своим опытом. А чтобы старт работы в JAICP был совсем легким, команда создала обучающий видеокурс с уроками, доступный каждому пользователю.
Фреймворки.
Что это такое.
Фреймворки — самый популярный способ создания виртуальных ассистентов среди разработчиков. Это набор инструментов с открытым исходным кодом и высокой степенью контроля над разработкой, который интегрируется с NLU для создания сложного сценария в рамках собственного разговорного решения и решения разных NLP-задач. Conversational AI фреймворки доступны для разных языков программирования. Так, например, Deep Pavlov — это фреймворк для Python, JAICF — для Kotlin, а Jovo — для TypeScript.
Чем отличаются от платформ.
Фреймворки имеют открытый исходный код, то есть они бесплатны для коммерческого использования. Если в базовой версии отсутствуют нужные функции, интеграции или каналы, их можно добавить за дополнительную плату или разработать самостоятельно.
Фреймворки ограничиваются только возможностями языка программирования, для которого они создаются. Это позволяет гибко работать с классами и форматами ввода и вывода данных, изменять код под цели проекта и кастомизировать ответы автоматически, в зависимости от класса.
Код, написанный с помощью фреймворка, необходимо разместить в среде выполнения самостоятельно. Для этого можно использовать свои собственные сервера в облаке или контуре или воспользоваться платформой, которая возьмет на себя все задачи по хостингу, масштабированию и балансировке. То же касается NLU-моделей. Если сценарий виртуального ассистента использует в своей работе понимание естественного языка, такие NLU-модели также необходимо размещать в среде выполнения и, соответственно, масштабировать и балансировать нагрузку.
Не всегда фреймворки предоставляют готовые модули интеграции с текстовыми и телефонными каналами. Если нужного канала нет, его необходимо разработать самостоятельно или воспользоваться платформой. Например, если код проекта написан с использованием фреймворка JAICF, этот проект можно разместить в платформе JAICP, которая предоставляет интеграцию с необходимыми каналами.
Что можно создать с помощью фреймворка.
С помощью фреймворков можно реализовать любой функционал бота. Единственное о чем стоить помнить — это то, что функционал ограничен языком программирования.
Кому интересно решение.
Использование фреймворка имеет смысл тогда, когда по какой-то причине уже сформированы другие практики и сервисы внутри компании, которые решают задачи, которые не решала бы платформа.
Например, у компаний могут быть свои собственные модели для понимания естественного языка, которые компания хочет переиспользовать в новом conversational AI проекте. Так, если у компании уже есть аналоги сервисов, которые предоставляет платформа, то имеет смысл разработать сценарий с помощью фреймворка, а не обращаться к платформе.
Какие общие преимущества у фреймворков.
Базовые конструкции бота уже описаны вендором — модель диалога, правила перехода между стейтами, интеграции с NLU и т.д. Разработчику остается только описать логику самого бота.
Разработчик может сколько угодно расширять модель диалога или создавать новые конструкции и подключать любые доступные библиотеки для интеграции с внешними системами.
Отладка бота выполняется как отладка обычной программы с возможностями локальной разработки, установкой точек прерывания, вывода содержимого контекста и т.д.
На что обращать внимание при выборе фреймворка.
При выборе фреймворка важны все детали: какие компоненты нужно подключить и какие требования предъявляются к производительности готового проекта. Убедитесь, что вы выбрали фреймворк от компании, которая имеет собственное ядро NLU, потому что это самый сложный и важный компонент во фреймворках для разговорного AI.
Обязательно загляните на Github, чтобы узнать дату последнего обновления и убедиться, что фреймворк имеет постоянную поддержку и активное сообщество. Так вы можете быть абсолютно уверены, что найдете готовое решение и получите быструю помощь, если возникнет какая-либо проблема.
Перед началом работы определите, какая команда будет работать над проектом. Например, если в штате разработчики на Python или JavaScript, то целесообразно искать удобное для них решение.
Rasa Open Source.
Платформа машинного обучения с открытым исходным кодом для создания, улучшения и развертывания контекстных помощников по каналам и языкам на основе среды ML. Rasa построена на Python и имеет встроенный NLU, поэтому вы можете использовать эту платформу как сквозное решение или как сервер NLU.
На базе Rasa можно создавать контекстных ассистентов для Facebook Messenger, Slack, Google Hangouts, Webex Teams, Microsoft Bot Framework, Rocket.Chat, Mattermost, Telegram, Twilio, а также собственные разговорные каналы и голосовые навыки для  Алисы, Alexa и Google Assistant.
Deep Pavlov.
Фреймворк с открытым исходным кодом, построенный на Python. На его базе можно создавать навыки чат-ботов с NLU, поддержкой множественных состояний диалога и контекста. Deep Pavlov имеет отличный набор готовых deep learning NLU-моделей для русского языка. На данный момент платформа не имеет поддержки каналов, но может использоваться  для создания практически любых разговорных решений и чат-ботов, хотя и требует большой настройки и дополнительной работы.
Jovo.
Фреймворк Jovo построен на TypeScript. Он позволяет создавать голосовые навыки, которые работают на разных устройствах и платформах, включая Alexa от Amazon, Google Ассистента, мобильные телефоны, Raspberry Pi и др.
BotPress.
BotPress — это разговорная AI-платформа с открытым исходным кодом, построенная на TypeScript. Позволяет создавать проекты, автоматизирующие коммуникации и рабочие процессы в компаниях. В BotPress есть такие удобные функции, как расширенные разрешения и безопасное хранение личных данных. Однако фреймворк не имеет ряда полезных фич, таких как количество администраторов, роли, мультилингвальность, виджеты с белыми метками и интерфейс и т. д. В основном нацелен на разработку ботов, а не голосовых решений.
JAICF от Just AI.
JAICF — это первый в мире фреймворк для разработки разговорных решений на Kotlin. Фреймворк на базе Kotlin идеально подойдет, если вы планируете создать приложение с регулярной потребностью в обновлениях и оптимизации. Kotlin следует концепции контекстного программирования, поэтому наилучшим образом подходит для создания разговорных решений, где контекст диалога является главной идеей и ценностью.
Фреймворк JAICF в отличие от конструкторов дает возможность разрабатывать сложные контекстно-зависимые диалоги и сценарии для голосовых интерфейсов. Он предоставляет свободный доступ ко всем профессиональным инструментам, необходимым для разработки полноценной разговорной среды — готовой диалоговой машине, библиотекам, NLU-движкам (встроенному NLU-сервису CAILA и внешним движкам вроде Dialogflow или Rasa), системам аналитики и хранения данных, готовым интеграциям с мессенджерами и экосистемами голосовых ассистентов Алиса, Alexa, Google Assistant, Facebook Messenger, Slack, Telegram и не только.
JAICF не реализует сам механизм NLU. Вместо этого JAICF использует сторонние библиотеки и сервисы, реализующие эту функциональность и предоставляющие готовые к использованию модули NLU для ваших проектов. Таким образом, вы можете выбрать подходящую реализацию NLU, которая удовлетворяет вашим требованиям (например, языковая поддержка, цена и т. д.), и использовать ее в своем проекте на основе JAICF.
Кроссплатформенность в JAICF позволяет любому разработчику на Kotlin создавать и запускать кроссплатформенные агенты корпоративного уровня, а это означает, что один сценарий JAICF может работать одновременно в нескольких каналам, например, в Amazon Alexa, Google Actions, Facebook Messenger и других.
Модульное тестирование позволяет минимизировать количество ошибок с помощью автоматизированного тестирования сценариев диалога. JAICF использует фреймворки привычного unit-тестирования и возможности Kotlin для удобного и лаконичного DSL.
Подводим итоги.
Рынок инструментов для создания ботов в России и в мире сформировался. Появились продукты, которые упрощают вход в разговорный ИИ для всех сегментов пользователей: для малого бизнеса есть готовые решения и конструкторы, для среднего бизнеса  —конструкторы и платформы, для крупного бизнеса  — платформы и фреймворки.
Продукты, доступные на рынке сейчас, уже закрывают весь цикл создания и внедрения ботов: есть инструменты прототипирования, разработки, обучения и дообучения ботов, их внедрения и масштабирования.
Conversational AI продукты демократизируют доступ ко всем медиумам, в которых боты могут существовать — даже самый маленький бизнес уже сейчас может сделать свой собственный навык для Алисы, создать простой умный IVR для обработки входящих звонков, настроить чат-бота в ВК, который автоматизирует сбор заявок, и запустить исходящую телефонию для напоминания о деталях сделки.
Что из этого подходит вам больше — выбор за вами. Но вы точно сможете найти что-то для себя.